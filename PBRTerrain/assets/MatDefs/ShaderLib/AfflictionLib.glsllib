#import "MatDefs/ShaderLib/NoiseLib.glsllib"

//code for tri-planar mapping on any afflicted shaders
vec4 getTriPlanarBlend(in vec4 coords, in vec3 blending, in sampler2D map, in float scale) {
      vec4 col1 = texture2D( map, coords.yz * scale);
      vec4 col2 = texture2D( map, coords.xz * scale);
      vec4 col3 = texture2D( map, coords.xy * scale); 
      // blend the results of the 3 planar projections.
      vec4 tex = col1 * blending.x + col2 * blending.y + col3 * blending.z;
      
      return tex;
}


//used for mixing normal map normals with the world normals. texure slots without a normal map use wNormal as their blending value instead
vec3 mixNormals(in vec3 normalIn, in vec3 worldNorm, in mat3 tbnMat){
    
    
    vec3 returnNorm = normalize((normalIn.xyz * vec3(2.0) - vec3(1.0)));
  //   vec3 returnNorm = normalize(normalIn.xyz);
     
     
    
        vec3 baseNorm = worldNorm.rgb + vec3(0, 0, 1);
        returnNorm *= vec3(-1, -1, 1);
        returnNorm = baseNorm.rgb*dot(baseNorm.rgb, returnNorm.rgb)/baseNorm.z - returnNorm.rgb;

        returnNorm = normalize(returnNorm);
        
        
        
        
   //     returnNorm.rgb = normalize(returnNorm.rgb * vec3(2.0) - vec3(1.0));

        return returnNorm;
}


vec4 desaturate(vec4 albedo, float deathVar){
        
    vec3 gray = vec3(dot(vec3(0.2126,0.7152,0.0722), albedo.rgb));
   // gray *= vec3(0.7, 0.5, 0.45);
    albedo = vec4(mix(albedo.rgb, gray, deathVar), 0.0);

    return albedo;
}

//methods for terrains
    vec3 alterLiveliness(vec3 color, float liveVal, int mode){
    //change hue

    //    liveVal 

   //     if(mode > 0){ //0 means dont scale to be dead or alive at all (bricks, etc)



            float deathVar = (1.0 - (liveVal));

            if(mode > 0){ //1 means fully alive. 1 is less alive, and 2 is slightly less but still alive
                deathVar -= mode * 0.03;

                deathVar = max(0.0, deathVar);
            }

            deathVar = min(0.99, deathVar);

            float hueVar = (deathVar) * 0.34;
            color.r += color.r*hueVar * 1.8;
            color.g -= color.g*hueVar;
            color.b -= color.b*hueVar*5.0 ;


            color = desaturate(vec4(color, 1.0), deathVar).rgb;
  //      }
        
   //     color = vec3(0.1);
        
        return color;
        
    }


    vec3 alterLiveliness(vec3 color, float livelinessValue){
    //change hue

        float deathVar = (1.0 - (livelinessValue));

        float hueVar = (deathVar) * 0.34;
        color.r += color.r*hueVar * 1.8;
        color.g -= color.g*hueVar;
        color.b -= color.b*hueVar*5.0 ;


       color = desaturate(vec4(color, 1.0), deathVar).rgb;


        return color;
    }


//methods for death and plaguedness applied to all affliction shaders


vec4 alterBarkLiveliness(vec4 albedo, float livelinessValue){
    float deathVar = 1.0 - livelinessValue;

    float hueVar = (deathVar) * 0.97;
    albedo.r += albedo.r*hueVar * 0.21;
    albedo.g += albedo.g*hueVar*0.84;
    albedo.b -= albedo.b*hueVar*1.9;

    albedo *= 0.1 + (0.9 * livelinessValue);

    return albedo;
}

vec4 alterPlantLiveliness(vec4 albedo, float livelinessValue){
    float deathVar = 1.0 - livelinessValue;

    float hueVar = (deathVar) * 0.77;
    albedo.r += albedo.r*hueVar * 1.8;
    albedo.g -= albedo.g*hueVar;
    albedo.b -= albedo.b*hueVar*5.0 ;

    return albedo;
}

vec4 alterStoneLiveliness(vec4 albedo, float livelinessValue){
    livelinessValue = 0.56 + (0.44 * livelinessValue); //stone and rock has an 80% minimum, and scales up from there

    float deathVar = 1.0 - livelinessValue;
    

    float hueVar = (deathVar);
    albedo.r += albedo.r*hueVar * 1.2;
    albedo.g += albedo.g*hueVar;
    albedo.b -= albedo.b*hueVar*3.14 ;

    albedo = desaturate(albedo, deathVar * 1.7);

    

    return albedo;
}



//PLAGUED METHODS

//adjusts the plagued value for the best visual representation (since 0.0 - 1.0 is not as visually linear as it is numerically)
float getAdjustedPlaguedVar(float plaguedVar){

    float t0 = 0.15;
    float t1 = 0.45;
    float t2 = 0.75;
    float t3 = 0.95;
    float adjustedVar;

    if(plaguedVar > 0.02){
        adjustedVar = mix(0.02, 0.53, plaguedVar);
    }
    else{
        adjustedVar = 0;
    }
   
    return adjustedVar;
}

float getPlaguedEdgeTaper(float noiseVar, float plaguedVar){

    float amt = noiseVar - (0.4 * plaguedVar) - .04;

    if(amt <= 0.05){
        amt = 0.05;
    }
    

    return amt;
}

vec4 alterPlaguedColor(float plaguedVar, vec4 albedo, vec4 plaguedAlbedo, float noiseVar){    

    float originalPlaguedVar = plaguedVar; 
    plaguedVar = getAdjustedPlaguedVar(plaguedVar);
    

    float edgeTaper = getPlaguedEdgeTaper(noiseVar, plaguedVar);  

    if(plaguedVar >= noiseVar){
        float albedoOpacity = min((originalPlaguedVar * 0.2) + 0.8 , 1.0);
        albedo.rgba = mix(albedo.rgba, plaguedAlbedo.rgba, plaguedAlbedo.a * albedoOpacity);
    }
    else if(plaguedVar > edgeTaper){
        float edgeDiff = noiseVar - plaguedVar;
        edgeDiff = edgeDiff / plaguedVar;


        albedo.rgba = mix(plaguedAlbedo.rgba, albedo.rgba, edgeDiff * plaguedAlbedo.a);
    }
   else{
        float minimumVal = max(0.15, noiseVar) * min((plaguedVar - (plaguedVar * -plaguedVar * 30)), 0.8);
        
        albedo.rgba = mix(albedo.rgba, plaguedAlbedo.rgba, minimumVal * plaguedAlbedo.a);
    }
    

    return albedo;
}
vec4 alterPlaguedGlow(float plaguedVar, vec4 plaguedGlowColor, float noiseVar){    

    plaguedGlowColor.rgb = mix(vec3(0), plaguedGlowColor.rgb, plaguedVar * noiseVar * plaguedGlowColor.a);

    return plaguedGlowColor;
}
   
vec3 alterPlaguedNormals(float plaguedVar, vec3 normal, vec3 plaguedNormal, float noiseVar){
//do something so that the middle points of the 

 //   plaguedNormal = (vec3(2) * plaguedNormal) - vec3(1);

    vec3 originalNorm = normal * 1.3 * noiseVar;

    plaguedVar = getAdjustedPlaguedVar(plaguedVar);

    float edgeTaper = getPlaguedEdgeTaper(noiseVar, plaguedVar);  
    
 //   plaguedNormal = mixNormals(plaguedNormal);

    if(plaguedVar >= noiseVar){
        normal = plaguedNormal;
    }
    else if(plaguedVar > edgeTaper){
        float edgeDiff = noiseVar - plaguedVar;
        edgeDiff = edgeDiff / plaguedVar;
         normal = mix(plaguedNormal, normal, edgeDiff);
    }
    else{
        normal = mix(normal, plaguedNormal, noiseVar * plaguedVar);
    //    albedo.rgb = mix(albedo.rgb, plaguedAlbedo.rgb, plaguedVar * noiseVar * noiseVar* plaguedAlbedo.a);
    }

    
    return normalize(normal + originalNorm);
}

vec3 alterPlaguedNormalsForTerrain(float plaguedVar, vec3 normal, vec3 plaguedNormal, float noiseVar, vec3 worldNorm, in mat3 tbnMat){
//do something so that the middle points of the 

 //   plaguedNormal = (vec3(2) * plaguedNormal) - vec3(1);


    plaguedVar = getAdjustedPlaguedVar(plaguedVar);

    float edgeTaper = getPlaguedEdgeTaper(noiseVar, plaguedVar);  
    
    
    vec3 blendedNormal = normal;
    
    float blendValue = plaguedVar;
    
    if(plaguedVar >= noiseVar){
     //   normal = plaguedNormal;
        blendValue = 1.0;
    }
    else if(plaguedVar > edgeTaper){
        float edgeDiff = noiseVar - plaguedVar;
        edgeDiff = edgeDiff / plaguedVar;
        
        blendValue *= edgeDiff;
    //     normal = mix(plaguedNormal, normal, edgeDiff);
    }
    else{
        blendValue = noiseVar * plaguedVar;
    //    albedo.rgb = mix(albedo.rgb, plaguedAlbedo.rgb, plaguedVar * noiseVar * noiseVar* plaguedAlbedo.a);
    }
    
    
    
    plaguedNormal = mixNormals(plaguedNormal, worldNorm, tbnMat);
    blendedNormal = mix(normal, plaguedNormal, blendValue);

 //   blendedNormal = normalize(tbnMat * blendedNormal);
    
    
    return blendedNormal;
}

vec3 alterPlaguedAo(float plaguedVar, vec3 ao, vec3 plaguedAo, float noiseVar){


    plaguedVar = getAdjustedPlaguedVar(plaguedVar);

    float edgeTaper = getPlaguedEdgeTaper(noiseVar, plaguedVar);  

    if(plaguedVar >= noiseVar){
        ao = plaguedAo;
    }
    else if(plaguedVar > edgeTaper){
        float edgeDiff = noiseVar - plaguedVar;
        edgeDiff = edgeDiff / plaguedVar;

         ao = mix(plaguedAo, ao, edgeDiff);
    }
    else{
        ao = mix(ao, plaguedAo, noiseVar * plaguedVar);
    //    albedo.rgb = mix(albedo.rgb, plaguedAlbedo.rgb, plaguedVar * noiseVar * noiseVar* plaguedAlbedo.a);
    }
    
    return ao;
}

float alterPlaguedRoughness(float plaguedVar, float originalRoughness, float plaguedRoughness, float noiseVar){

    plaguedVar = getAdjustedPlaguedVar(plaguedVar) * 0.93;


    float edgeTaper = getPlaguedEdgeTaper(noiseVar, plaguedVar);  
    if(plaguedVar >= noiseVar){
        originalRoughness = plaguedRoughness;
    }
    else if(plaguedVar > edgeTaper){
        float edgeDiff = noiseVar - plaguedVar;
        edgeDiff = edgeDiff / plaguedVar;

         originalRoughness = mix(plaguedRoughness, originalRoughness, edgeDiff);
    }
    else{
        float newVal = mix(originalRoughness, plaguedRoughness, plaguedVar * noiseVar *2);
    }

    
    originalRoughness = min(originalRoughness, 1.0);


    return originalRoughness;
}

float alterPlaguedMetallic(float plaguedVar, float originalMetallic, float plaguedMetallic, float noiseVar){


    plaguedVar = getAdjustedPlaguedVar(plaguedVar);


       float edgeTaper = getPlaguedEdgeTaper(noiseVar, plaguedVar);  
    if(plaguedVar >= noiseVar){
        originalMetallic = plaguedMetallic;
    }
    else if(plaguedVar > edgeTaper){
        float edgeDiff = noiseVar - plaguedVar;
        edgeDiff = edgeDiff / plaguedVar;

         originalMetallic = mix(plaguedMetallic, originalMetallic, edgeDiff);
    }
    else{
        float newVal = mix(originalMetallic, plaguedMetallic, plaguedVar * noiseVar *2);
    }

    
    originalMetallic = min(originalMetallic, 1.0);
    return originalMetallic;
}






